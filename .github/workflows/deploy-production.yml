name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  checks: write
  deployments: write
  id-token: write
  statuses: write
  security-events: write

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  BACKEND_URL: ${{ secrets.BACKEND_URL }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

jobs:
  # ================================
  # Test Job - Run before deployment
  # ================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      NEON_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      # Setup Node.js for frontend testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend type checking
        run: |
          cd frontend
          npx tsc --noEmit

      # Setup Python for backend testing
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend syntax check
        run: |
          cd backend
          python -m py_compile app.py

      - name: Test database connection
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "SELECT version();"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Create root role (compat)
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -v ON_ERROR_STOP=1 -c "DO $$BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='root') THEN CREATE ROLE root WITH LOGIN SUPERUSER PASSWORD 'postgres'; END IF; END$$;"

      # Build checks
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build backend Docker image
        if: ${{ hashFiles('backend/Dockerfile') != '' }}
        run: |
          cd backend
          docker build -t cognitive-backend:test . || echo "Skipping Docker build (no Dockerfile or local-only)"

  # ================================
  # Security Scan Job
  # ================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      # Run security scans
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ always() && hashFiles('trivy-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

      # Check for secrets in code
      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --no-git -v --redact || true

  # ================================
  # Deploy Backend Job
  # ================================
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Deploy to Railway
      - name: Deploy to Railway
        if: ${{ env.RAILWAY_TOKEN != '' }}
        run: |
          npm install -g @railway/cli
          railway login --token ${{ env.RAILWAY_TOKEN }}
          railway link --project ${{ env.RAILWAY_PROJECT_ID }}
          railway deploy
        env:
          RAILWAY_TOKEN: ${{ env.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ env.RAILWAY_PROJECT_ID }}

      # Alternative: Deploy to Render
      - name: Deploy to Render (fallback)
        if: ${{ failure() && env.RENDER_DEPLOY_HOOK_URL != '' }}
        run: |
          curl -X POST ${{ env.RENDER_DEPLOY_HOOK_URL }}

      # Health check
      - name: Wait for backend deployment
        run: |
          echo "Waiting for backend to be ready..."
          timeout 300 bash -c 'while ! curl -f ${{ secrets.BACKEND_URL }}/api/health; do sleep 10; done' || true

      - name: Backend health check
        run: |
          if curl -f ${{ secrets.BACKEND_URL }}/api/health; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi

  # ================================
  # Deploy Frontend Job
  # ================================
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    timeout-minutes: 15
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      # Deploy to Vercel
      - name: Setup Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ env.VERCEL_TOKEN }}
        working-directory: frontend

      - name: Build project artifacts
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: frontend

      - name: Deploy project artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: frontend

      # Alternative: Deploy to Netlify
      - name: Deploy to Netlify (fallback)
        if: ${{ failure() && env.NETLIFY_AUTH_TOKEN != '' && env.NETLIFY_SITE_ID != '' }}
        run: |
          cd frontend
          npm install -g netlify-cli
          netlify deploy --prod --dir=out --auth=${{ env.NETLIFY_AUTH_TOKEN }} --site=${{ env.NETLIFY_SITE_ID }}

  # ================================
  # Post-Deploy Tests Job
  # ================================
  post-deploy-test:
    name: Post-Deploy Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      # Test backend API
      - name: Test backend API endpoints
        run: |
          # Test health endpoint
          curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1

          # Test MMSE questions endpoint
          curl -f ${{ secrets.BACKEND_URL }}/api/mmse/questions || exit 1

          echo "✅ Backend API tests passed"

      # Test frontend accessibility
      - name: Test frontend accessibility
        run: |
          # Test homepage
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

          # Test cognitive assessment page
          curl -f ${{ secrets.FRONTEND_URL }}/cognitive-assessment || exit 1

          echo "✅ Frontend accessibility tests passed"

      # Performance check
      - name: Performance check
        run: |
          URL="${{ secrets.BACKEND_URL }}/api/health"
          RT=$(curl -o /dev/null -s -w '%{time_total}' "$URL" || echo "fail")
          if [ "$RT" = "fail" ]; then echo "Error: request failed"; exit 1; fi
          awk -v t="$RT" 'BEGIN{ if (t+0>2.0) { printf("Warning: slow response %.2fs\n", t+0) } else { printf("OK: response %.2fs\n", t+0) } }'

  # ================================
  # Notification Job
  # ================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [post-deploy-test]
    if: always() && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

    steps:
      - name: Send Slack notification
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "Deployment ${{ job.status }}"
          SLACK_TITLE: "Deploy to Production"

      - name: Send Discord notification
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            **Cognitive Assessment Deployment ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}**
            Repository: {{ REPO }}
            Branch: {{ REF }}
            Commit: {{ SHA }}
            Author: {{ AUTHOR }}
            [View Deployment](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}

# ================================
# Environment Protection
# ================================
# This workflow will only run on the main branch and requires:
# - Successful tests
# - Security scans passed
# - Manual approval for production deployments (can be added)

# Required Secrets (add to GitHub repository settings):
# RAILWAY_TOKEN, RAILWAY_PROJECT_ID
# VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID
# BACKEND_URL, FRONTEND_URL
# SLACK_WEBHOOK_URL or DISCORD_WEBHOOK (optional)
