# Production Docker Compose Configuration
# For local production testing before deploying to Railway/Vercel

version: '3.8'

services:
  # ================================
  # Backend Service (Flask + ML)
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cognitive-backend-prod
    restart: unless-stopped

    # Environment
    env_file:
      - ./env.production.example
    environment:
      - FLASK_ENV=production
      - DEBUG=false
      - NODE_ENV=production

    # Networking
    ports:
      - "8000:8000"
    expose:
      - "8000"

    # Volumes for data persistence
    volumes:
      - ./backend/recordings:/app/recordings
      - ./backend/uploads:/app/uploads
      - ./backend/storage:/app/storage
      - ./backend/logs:/app/logs
      - ./model_bundle:/app/model_bundle:ro

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run

  # ================================
  # Database Service (PostgreSQL)
  # ================================
  database:
    image: postgres:15-alpine
    container_name: cognitive-db-prod
    restart: unless-stopped

    environment:
      POSTGRES_DB: cognitive_prod
      POSTGRES_USER: cognitive_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}

    # Persistent storage
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

    # Networking
    ports:
      - "5432:5432"
    expose:
      - "5432"

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cognitive_user -d cognitive_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # Redis Cache (Optional)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: cognitive-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes

    # Networking
    ports:
      - "6379:6379"
    expose:
      - "6379"

    # Persistent storage
    volumes:
      - redis_data:/data

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # Reverse Proxy (Nginx)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: cognitive-nginx-prod
    restart: unless-stopped

    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx

    # Networking
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# ================================
# Networks
# ================================
networks:
  default:
    name: cognitive-prod-network
    driver: bridge
