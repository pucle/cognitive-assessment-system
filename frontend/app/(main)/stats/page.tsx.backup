"use client";

import React, { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Sidebar } from "@/components/sidebar";
import { useLanguage } from "@/contexts/LanguageContext";
import { Menu, ArrowLeft } from "lucide-react";
import { motion } from "framer-motion";
import Link from "next/link";
import { MMSETrendChart } from "@/components/MMSETrendChart";
import { useUser } from "@clerk/nextjs";
import MmseLineChart from "@/components/charts/MmseLineChart";
import DetailedResultCard from "@/components/results/DetailedResultCard";

interface PersonalTestResult {
  id: number;
  sessionId: string;
  userEmail: string;
  userName: string;
  questionId: string;
  questionText: string;
  autoTranscript: string;
  manualTranscript: string;
  createdAt: string;
}

interface PatientAssessment {
  id: number;
  sessionId: string;
  name: string;
  email: string;
  age: string;
  gender: string;
  phone: string;
  status: string;
  finalMmse: number | null;
  overallGptScore: number | null;
  resultsJson: string;
  createdAt: string;
  updatedAt: string;
}

interface CognitiveRow {
  id: number;
  sessionId: string;
  userInfo: any;
  completedAt: string;
  finalMmseScore: number;
  overallGptScore: number;
  questionResults: any[];
  cognitiveAnalysis?: any;
  status: string;
  totalQuestions: number;
  answeredQuestions: number;
  completionRate: number;
  createdAt: string;
}

export default function StatsPage() {
  const { t } = useLanguage();

  // Safely use Clerk hook with error handling
  let clerkUser = null;
  let isLoaded = false;

  try {
    const clerkData = useUser();
    clerkUser = clerkData.user;
    isLoaded = clerkData.isLoaded;
  } catch (error) {
    console.warn('Clerk not available, using fallback:', error);
  }

  const [viewMode, setViewMode] = useState<'personal' | 'community'>('personal');
  const [userEmail, setUserEmail] = useState<string>('');
  const [currentUserId, setCurrentUserId] = useState<string>('');
  const [cognitiveResults, setCognitiveResults] = useState<CognitiveRow[]>([]);
  const [trainingData, setTrainingData] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // User info setup and data fetching
  useEffect(() => {
    if (isLoaded) {
      if (clerkUser) {
        const email = clerkUser.primaryEmailAddress?.emailAddress ||
                     clerkUser.emailAddresses?.[0]?.emailAddress;
        const userId = clerkUser.id;

        setUserEmail(email || '');
        setCurrentUserId(userId || email || 'demo_user');
        console.log('✅ User authenticated:', { userId, email });
      } else {
        // Use fallback
        const fallbackInfo = getFallbackUserInfo();
        setCurrentUserId(fallbackInfo.userId);
        setUserEmail(fallbackInfo.email);
        console.log('⚠️ Using fallback user info');
      }
    }
  }, [clerkUser, isLoaded]);

  // Fetch data when user info or mode changes
  useEffect(() => {
    if (currentUserId && isLoaded) {
      console.log('🔄 Stats page useEffect triggered, fetching data...');
      fetchAllData();
    }
  }, [viewMode, currentUserId, userEmail, isLoaded]);

  const fetchAllData = async () => {
    setLoading(true);
    setError(null);
    console.log(`📊 Starting data fetch for ${viewMode} mode, userId: ${currentUserId}`);

    try {
      // Fetch cognitive assessment results
      await fetchCognitiveResults();

      // Fetch training samples
      await fetchTrainingData();

    } catch (err) {
      console.error('❌ Error fetching stats data:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  const fetchCognitiveResults = async () => {
    console.log('🔍 Fetching cognitive assessment results...');

    const apiUrl = '/api/get-cognitive-assessment-results';
    const params = new URLSearchParams();

    if (viewMode === 'personal') {
      params.append('userId', currentUserId);
      params.append('usageMode', 'personal');
    } else {
      params.append('usageMode', 'community');
      params.append('userEmail', userEmail);
    }

    const fullUrl = `${apiUrl}?${params.toString()}`;
    console.log('📡 Calling API:', fullUrl);

    const response = await fetch(fullUrl);
    const result = await response.json();

    console.log('📥 API Response:', {
      success: result.success,
      count: result.count || result.data?.length || 0,
      status: response.status
    });

    if (result.success) {
      // Transform API data to match CognitiveRow interface
      const transformedData = (result.data || []).map((item: any): CognitiveRow => ({
        id: item.id,
        sessionId: item.sessionId,
        userInfo: item.userInfo,
        completedAt: item.completedAt || item.createdAt,
        finalMmseScore: item.finalMmseScore ?? 0, // Default to 0 if null
        overallGptScore: item.overallGptScore ?? 0, // Default to 0 if null
        questionResults: item.questionResults || [],
        cognitiveAnalysis: item.cognitiveAnalysis,
        status: item.status || 'completed',
        totalQuestions: item.totalQuestions || 12,
        answeredQuestions: item.answeredQuestions || 12,
        completionRate: item.completionRate || 100,
        createdAt: item.createdAt,
      }));
      setCognitiveResults(transformedData);
      console.log(`✅ Loaded ${transformedData.length} cognitive assessment results`);
    } else {
      throw new Error(result.error || 'Failed to fetch cognitive results');
    }
  };

  const fetchTrainingData = async () => {
    console.log('🔍 Fetching training samples...');

    try {
      const apiUrl = '/api/get-training-samples';
      const params = new URLSearchParams();

      if (viewMode === 'personal') {
        params.append('userId', currentUserId);
        params.append('usageMode', 'personal');
      } else {
        params.append('usageMode', 'community');
        params.append('userEmail', userEmail);
      }

      const fullUrl = `${apiUrl}?${params.toString()}`;
      console.log('📡 Calling Training API:', fullUrl);

      const response = await fetch(fullUrl);
      const result = await response.json();

      console.log('📥 Training API Response:', {
        success: result.success,
        count: result.count || result.data?.length || 0,
        status: response.status
      });

      if (result.success) {
        setTrainingData(result.data || []);
        console.log(`✅ Loaded ${result.data?.length || 0} training samples`);
      } else {
        console.warn('⚠️ Training data fetch failed:', result.error);
        setTrainingData([]);
      }
    } catch (err) {
      console.warn('⚠️ Training data fetch error:', err);
      setTrainingData([]);
    }
  };

  const handleModeChange = (mode: 'personal' | 'community') => {
    console.log(`🔄 Switching to ${mode} mode`);
    setViewMode(mode);
  };

  const handleRefresh = () => {
    console.log('🔄 Manual refresh triggered');
    fetchAllData();
  };

  const handleViewDetails = (result: any) => {
    // Navigate to detailed results page
    console.log('View details for:', result);
    window.location.href = `/results/${encodeURIComponent(result.sessionId)}`;
  };

  const getFallbackUserInfo = () => {
    // Fallback for when user is not authenticated
    // Try to get from localStorage or use demo data
    if (typeof window !== 'undefined') {
      const userInfo = localStorage.getItem('userInfo');
      if (userInfo) {
        try {
          return JSON.parse(userInfo);
        } catch {
          // Ignore invalid JSON
        }
      }
    }

    // Demo fallback - only use this for development/testing
    return {
      userId: 'demo_user',
      email: 'demo@example.com'
    };
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getScoreColor = (score: number) => {
    // With amber background, we use amber-900 for better contrast
    return "text-amber-900";
  };

  const getScoreBadgeColor = (score: number) => {
    if (score >= 80) return "bg-green-600";
    if (score >= 60) return "bg-yellow-600";
    if (score >= 40) return "bg-orange-600";
    return "bg-red-600";
  };

  // Calculate summary statistics
  const totalAssessments = cognitiveResults.length;
  const averageMmseScore = totalAssessments > 0
    ? (cognitiveResults.reduce((sum, item) => sum + (item.finalMmseScore || 0), 0) / totalAssessments).toFixed(2)
    : '0';
  const averageGptScore = totalAssessments > 0
    ? (cognitiveResults.reduce((sum, item) => sum + (item.overallGptScore || 0), 0) / totalAssessments).toFixed(2)
    : '0';

  return (
    <div className="min-h-screen" style={{
      backgroundColor: '#1C1917', // Deep warm charcoal
      fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", system-ui, sans-serif',
      color: '#FAFAF9' // Primary text - near white
    }}>
      {/* Header Section - iPhone 17 Pro Max Style */}
      <header className="border-b" style={{ borderColor: '#44403C' }}>
        <div className="max-w-7xl mx-auto px-6 py-4">
          <h1 className="text-2xl font-semibold mb-1" style={{ color: '#FAFAF9' }}>
            Statistics Overview
          </h1>
          <p className="text-sm" style={{ color: '#A8A29E' }}>
            Your learning progress and achievements
          </p>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="flex justify-between items-center mb-8">
          <div></div> {/* Spacer for centering */}
        <button
          onClick={handleRefresh}
          disabled={loading}
            className="px-6 py-3 rounded-xl font-medium text-sm transition-all duration-300 hover:scale-105"
            style={{
              backgroundColor: '#F59E0B', // Medium amber
              color: '#1F2937',
              border: 'none'
            }}
          >
            {loading ? 'Refreshing...' : 'Refresh Data'}
        </button>
            </div>


      {/* Mode Toggle - iPhone 17 Pro Max Style */}
      <div className="mb-8">
        <div className="flex gap-4">
          <button
            onClick={() => handleModeChange('personal')}
            disabled={loading}
            className="px-6 py-3 rounded-xl font-medium text-sm transition-all duration-300 hover:scale-105"
            style={{
              backgroundColor: viewMode === 'personal' ? '#F59E0B' : '#3A342E',
              color: viewMode === 'personal' ? '#1F2937' : '#D6D3D1',
              border: `1px solid ${viewMode === 'personal' ? '#F59E0B' : '#57534E'}`,
              boxShadow: viewMode === 'personal' ? '0 4px 6px -1px rgba(245, 158, 11, 0.3)' : 'none'
            }}
          >
            Personal Mode
          </button>
          <button
            onClick={() => handleModeChange('community')}
            disabled={loading}
            className="px-6 py-3 rounded-xl font-medium text-sm transition-all duration-300 hover:scale-105"
            style={{
              backgroundColor: viewMode === 'community' ? '#EA580C' : '#3A342E',
              color: viewMode === 'community' ? '#FAFAF9' : '#D6D3D1',
              border: `1px solid ${viewMode === 'community' ? '#EA580C' : '#57534E'}`,
              boxShadow: viewMode === 'community' ? '0 4px 6px -1px rgba(234, 88, 12, 0.3)' : 'none'
            }}
          >
            Community Mode
          </button>
        </div>
      </div>

      {/* Current Mode Indicator - iPhone 17 Pro Max Style */}
      <div className="mb-8 p-6 rounded-xl" style={{
        backgroundColor: '#2C2825',
        borderLeft: `4px solid ${viewMode === 'personal' ? '#F59E0B' : '#EA580C'}`
      }}>
        {viewMode === 'personal' ? (
          <p className="text-base font-medium" style={{ color: '#D6D3D1' }}>
            <span style={{ color: '#F59E0B', fontWeight: '600' }}>Personal Mode:</span> Showing your results (ID: {currentUserId})
          </p>
        ) : (
          <p className="text-base font-medium" style={{ color: '#D6D3D1' }}>
            <span style={{ color: '#EA580C', fontWeight: '600' }}>Community Mode:</span> Showing community results for email: {userEmail}
          </p>
            )}
          </div>

      {/* Loading State - iPhone 17 Pro Max Style */}
      {loading && (
        <div className="text-center py-16">
          <div className="inline-block animate-spin rounded-full h-10 w-10 border-3" style={{
            borderTopColor: '#F59E0B',
            borderRightColor: '#EA580C',
            borderBottomColor: '#C2410C',
            borderLeftColor: 'transparent'
          }}></div>
          <p className="mt-4 text-lg" style={{ color: '#D6D3D1' }}>Loading your data...</p>
              </div>
      )}

      {/* Error State - iPhone 17 Pro Max Style */}
      {error && (
        <div className="mb-8 p-6 rounded-xl" style={{
          backgroundColor: '#2C2825',
          border: '1px solid #DC2626',
          borderLeft: '4px solid #DC2626'
        }}>
          <p className="text-base font-medium mb-4" style={{ color: '#FAFAF9' }}>
            <span style={{ color: '#DC2626' }}>Error:</span> {error}
          </p>
          <button
            onClick={handleRefresh}
            className="px-6 py-3 rounded-xl font-medium text-sm transition-all duration-300 hover:scale-105"
            style={{
              backgroundColor: '#DC2626',
              color: '#FAFAF9',
              border: 'none'
            }}
          >
            Try Again
          </button>
              </div>
            )}

      {/* Stats Content */}
      {!loading && !error && (
        <div className="space-y-8">
          {/* MMSE Chart - Only in Personal Mode */}
          {viewMode === 'personal' && (
            <MmseLineChart data={cognitiveResults} />
          )}

          {/* Summary Cards - iPhone 17 Pro Max Style */}
          <motion.div
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            {/* Total Assessments Card */}
            <div
              className="p-6 rounded-xl shadow-lg border transition-all duration-300 hover:scale-105"
              style={{
                backgroundColor: '#3A342E',
                border: '1px solid #57534E',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium" style={{ color: '#D6D3D1' }}>Total Assessments</h3>
              </div>
              <div className="space-y-2">
                <div className="text-3xl font-bold" style={{ color: '#F59E0B' }}>{totalAssessments}</div>
                <div className="text-sm" style={{ color: '#A8A29E' }}>Completed evaluations</div>
            </div>
            </div>

            {/* Average MMSE Card */}
            <div
              className="p-6 rounded-xl shadow-lg border transition-all duration-300 hover:scale-105"
              style={{
                backgroundColor: '#3A342E',
                border: '1px solid #57534E',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium" style={{ color: '#D6D3D1' }}>Average MMSE</h3>
              </div>
              <div className="space-y-2">
                <div className="text-3xl font-bold" style={{ color: '#F97316' }}>{averageMmseScore}</div>
                <div className="text-sm" style={{ color: '#A8A29E' }}>Cognitive score</div>
            </div>
          </div>

            {/* Average GPT Card */}
            <div
              className="p-6 rounded-xl shadow-lg border transition-all duration-300 hover:scale-105"
              style={{
                backgroundColor: '#3A342E',
                border: '1px solid #57534E',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium" style={{ color: '#D6D3D1' }}>Average GPT</h3>
              </div>
              <div className="space-y-2">
                <div className="text-3xl font-bold" style={{ color: '#EA580C' }}>{averageGptScore}</div>
                <div className="text-sm" style={{ color: '#A8A29E' }}>AI evaluation score</div>
              </div>
            </div>

            {/* Training Samples Card */}
            <div
              className="p-6 rounded-xl shadow-lg border transition-all duration-300 hover:scale-105"
              style={{
                backgroundColor: '#3A342E',
                border: '1px solid #57534E',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium" style={{ color: '#D6D3D1' }}>Training Samples</h3>
              </div>
              <div className="space-y-2">
                <div className="text-3xl font-bold" style={{ color: '#C2410C' }}>{trainingData.length}</div>
                <div className="text-sm" style={{ color: '#A8A29E' }}>AI training data</div>
              </div>
            </div>
          </motion.div>

          {/* Detailed Results Section */}
          {totalAssessments > 0 && (
            <div>
              <div className="mb-8">
                <h2 className="text-2xl font-semibold mb-2" style={{ color: '#FAFAF9' }}>
                  Assessment Details
                </h2>
                <p style={{ color: '#A8A29E' }}>
                  View detailed results for each assessment with comprehensive AI analysis
                </p>
              </div>

              <div className="space-y-6">
                {cognitiveResults.map((result, index) => (
                  <div key={result.id || index}>
                    <DetailedResultCard
                      result={result}
                      onViewDetails={handleViewDetails}
                    />
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* No Data State - iPhone 17 Pro Max Style */}
          {totalAssessments === 0 && (
            <motion.div
              className="text-center py-16 rounded-xl"
              style={{
                backgroundColor: '#2C2825',
                border: '1px solid #57534E'
              }}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div className="mb-8">
                <div
                  className="w-20 h-20 mx-auto rounded-full flex items-center justify-center mb-6"
                  style={{ backgroundColor: '#3A342E' }}
                >
                  <div className="w-10 h-10 rounded-full" style={{ backgroundColor: '#F59E0B' }}></div>
                </div>
              </div>
              <h3 className="text-2xl font-semibold mb-4" style={{ color: '#FAFAF9' }}>
                {viewMode === 'personal' ? 'No Assessments Yet' : 'No Community Data'}
              </h3>
              <p className="text-base mb-8 max-w-lg mx-auto leading-relaxed" style={{ color: '#A8A29E' }}>
                {viewMode === 'personal'
                  ? 'You haven\'t completed any cognitive assessments yet. Start your first evaluation to see progress charts and detailed analysis.'
                  : 'No community data available for this email address. Join community assessments to contribute and view results.'
                }
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={() => window.location.href = '/cognitive-assessment'}
                  className="px-8 py-4 rounded-xl font-medium text-base transition-all duration-300 hover:scale-105"
                  style={{
                    backgroundColor: '#F59E0B',
                    color: '#1F2937',
                    border: 'none'
                  }}
                >
                  Start Assessment
                </button>
                <button
                  onClick={() => window.location.href = '/menu'}
                  className="px-8 py-4 rounded-xl font-medium text-base transition-all duration-300 hover:scale-105"
                  style={{
                    backgroundColor: '#3A342E',
                    color: '#D6D3D1',
                    border: '1px solid #57534E'
                  }}
                >
                  View Menu
                </button>
              </div>
            </motion.div>
          )}
        </div>
      )}
    </div>
  );
}



