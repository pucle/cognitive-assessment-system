"""
Generate Training Audio Data
T·∫°o audio files t·ª´ training sentences s·ª≠ d·ª•ng TTS
"""

import os
import sys
import json
import logging
import subprocess
from pathlib import Path
from typing import List, Dict
import time

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TrainingAudioGenerator:
    """
    T·∫°o audio training data t·ª´ sentences
    """
    
    def __init__(self):
        self.training_data_dir = Path(__file__).parent / "training_data"
        self.audio_output_dir = self.training_data_dir / "audio"
        self.audio_output_dir.mkdir(exist_ok=True)
        
        # TTS settings
        self.sample_rate = 16000  # Whisper requirement
        self.audio_format = "wav"
        
    def _install_tts_dependencies(self):
        """C√†i ƒë·∫∑t TTS dependencies"""
        try:
            logger.info("üì¶ Installing TTS dependencies...")
            
            packages = [
                "gtts",           # Google Text-to-Speech
                "pyttsx3",       # Offline TTS
                "edge-tts",      # Microsoft Edge TTS
                "pydub",         # Audio processing
                "soundfile"      # Audio file handling
            ]
            
            for package in packages:
                logger.info(f"Installing {package}...")
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", package, "--quiet"
                ])
            
            logger.info("‚úÖ TTS dependencies installed successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to install TTS dependencies: {e}")
            return False
    
    def _load_training_sentences(self):
        """Load training sentences t·ª´ file JSON"""
        try:
            training_file = self.training_data_dir / "training_data.json"
            
            if not training_file.exists():
                logger.error("‚ùå Training data file not found. Run fine_tune_whisper.py first!")
                return []
            
            with open(training_file, 'r', encoding='utf-8') as f:
                training_data = json.load(f)
            
            sentences = [item["sentence"] for item in training_data]
            logger.info(f"‚úÖ Loaded {len(sentences)} training sentences")
            return sentences
            
        except Exception as e:
            logger.error(f"‚ùå Failed to load training sentences: {e}")
            return []
    
    def _generate_audio_with_gtts(self, text: str, filename: str) -> bool:
        """T·∫°o audio s·ª≠ d·ª•ng Google TTS"""
        try:
            from gtts import gTTS
            
            # T·∫°o TTS v·ªõi ti·∫øng Vi·ªát
            tts = gTTS(text=text, lang='vi', slow=False)
            
            # L∆∞u audio file
            audio_path = self.audio_output_dir / filename
            tts.save(str(audio_path))
            
            # Convert to 16kHz WAV n·∫øu c·∫ßn
            if audio_path.suffix != '.wav':
                self._convert_to_wav(audio_path)
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è gTTS failed for '{text[:30]}...': {e}")
            return False
    
    def _generate_audio_with_edge_tts(self, text: str, filename: str) -> bool:
        """T·∫°o audio s·ª≠ d·ª•ng Microsoft Edge TTS"""
        try:
            import asyncio
            import edge_tts
            
            async def generate():
                communicate = edge_tts.Communicate(text, "vi-VN-HoaiMyNeural")
                await communicate.save(str(self.audio_output_dir / filename))
            
            # Ch·∫°y async function
            asyncio.run(generate())
            
            # Convert to 16kHz WAV
            self._convert_to_wav(self.audio_output_dir / filename)
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Edge TTS failed for '{text[:30]}...': {e}")
            return False
    
    def _convert_to_wav(self, audio_path: Path):
        """Convert audio sang WAV 16kHz"""
        try:
            from pydub import AudioSegment
            
            # Load audio
            audio = AudioSegment.from_file(str(audio_path))
            
            # Convert to mono v√† 16kHz
            audio = audio.set_channels(1)
            audio = audio.set_frame_rate(self.sample_rate)
            
            # L∆∞u l·∫°i d∆∞·ªõi d·∫°ng WAV
            wav_path = audio_path.with_suffix('.wav')
            audio.export(str(wav_path), format='wav')
            
            # X√≥a file c≈© n·∫øu kh√°c WAV
            if audio_path != wav_path:
                audio_path.unlink()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Audio conversion failed: {e}")
    
    def _generate_audio_batch(self, sentences: List[str], batch_size: int = 10):
        """T·∫°o audio theo batch ƒë·ªÉ tr√°nh rate limiting"""
        try:
            logger.info(f"üéµ Generating audio for {len(sentences)} sentences...")
            
            successful_generations = 0
            
            for i in range(0, len(sentences), batch_size):
                batch = sentences[i:i + batch_size]
                logger.info(f"Processing batch {i//batch_size + 1}/{(len(sentences) + batch_size - 1)//batch_size}")
                
                for j, sentence in enumerate(batch):
                    sentence_index = i + j
                    filename = f"training_{sentence_index:05d}.{self.audio_format}"
                    
                    # Th·ª≠ c√°c TTS methods kh√°c nhau
                    success = False
                    
                    # Method 1: Edge TTS (Microsoft)
                    if not success:
                        success = self._generate_audio_with_edge_tts(sentence, filename)
                    
                    # Method 2: Google TTS
                    if not success:
                        success = self._generate_audio_with_gtts(sentence, filename)
                    
                    if success:
                        successful_generations += 1
                        logger.info(f"‚úÖ Generated audio {sentence_index + 1}/{len(sentences)}: {sentence[:50]}...")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to generate audio for: {sentence[:50]}...")
                    
                    # Delay ƒë·ªÉ tr√°nh rate limiting
                    time.sleep(0.5)
                
                # Delay gi·ªØa c√°c batch
                if i + batch_size < len(sentences):
                    logger.info("‚è≥ Waiting between batches...")
                    time.sleep(2)
            
            logger.info(f"‚úÖ Audio generation completed: {successful_generations}/{len(sentences)} successful")
            return successful_generations
            
        except Exception as e:
            logger.error(f"‚ùå Audio generation failed: {e}")
            return 0
    
    def _update_training_data(self, successful_count: int):
        """C·∫≠p nh·∫≠t training data v·ªõi audio files th·ª±c t·∫ø"""
        try:
            training_file = self.training_data_dir / "training_data.json"
            
            if not training_file.exists():
                logger.warning("‚ö†Ô∏è Training data file not found")
                return
            
            # Load existing data
            with open(training_file, 'r', encoding='utf-8') as f:
                training_data = json.load(f)
            
            # Update v·ªõi audio files th·ª±c t·∫ø
            for i, item in enumerate(training_data):
                audio_filename = f"training_{i:05d}.{self.audio_format}"
                audio_path = self.audio_output_dir / audio_filename
                
                if audio_path.exists():
                    item["audio_file_path"] = str(audio_path.relative_to(self.training_data_dir))
                    item["audio_exists"] = True
                    item["audio_duration"] = self._get_audio_duration(audio_path)
                else:
                    item["audio_exists"] = False
                    item["audio_duration"] = 0
            
            # L∆∞u updated data
            with open(training_file, 'w', encoding='utf-8') as f:
                json.dump(training_data, f, ensure_ascii=False, indent=2)
            
            logger.info("‚úÖ Updated training data with audio file information")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to update training data: {e}")
    
    def _get_audio_duration(self, audio_path: Path) -> float:
        """L·∫•y duration c·ªßa audio file"""
        try:
            from pydub import AudioSegment
            audio = AudioSegment.from_file(str(audio_path))
            return len(audio) / 1000.0  # Convert to seconds
        except:
            return 0.0
    
    def _create_audio_summary(self):
        """T·∫°o summary v·ªÅ audio files"""
        try:
            audio_files = list(self.audio_output_dir.glob(f"*.{self.audio_format}"))
            
            summary = {
                "total_audio_files": len(audio_files),
                "audio_format": self.audio_format,
                "sample_rate": self.sample_rate,
                "total_duration": sum(self._get_audio_duration(f) for f in audio_files),
                "files": [
                    {
                        "filename": f.name,
                        "size_mb": f.stat().st_size / (1024 * 1024),
                        "duration": self._get_audio_duration(f)
                    }
                    for f in audio_files
                ]
            }
            
            summary_file = self.audio_output_dir / "audio_summary.json"
            with open(summary_file, 'w', encoding='utf-8') as f:
                json.dump(summary, f, ensure_ascii=False, indent=2)
            
            logger.info("‚úÖ Created audio summary")
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create audio summary: {e}")
            return None
    
    def generate_all_audio(self):
        """T·∫°o t·∫•t c·∫£ audio files"""
        try:
            logger.info("üöÄ Starting audio generation for training data...")
            
            # 1. Install dependencies
            if not self._install_tts_dependencies():
                raise Exception("Failed to install TTS dependencies")
            
            # 2. Load training sentences
            sentences = self._load_training_sentences()
            if not sentences:
                raise Exception("No training sentences found")
            
            # 3. Generate audio files
            successful_count = self._generate_audio_batch(sentences)
            
            if successful_count > 0:
                # 4. Update training data
                self._update_training_data(successful_count)
                
                # 5. Create summary
                summary = self._create_audio_summary()
                
                logger.info("‚úÖ Audio generation completed successfully!")
                logger.info(f"üìÅ Audio files saved to: {self.audio_output_dir}")
                logger.info(f"üìä Summary: {summary['total_audio_files']} files, {summary['total_duration']:.1f}s total")
                
                return True
            else:
                logger.error("‚ùå No audio files were generated successfully")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Audio generation failed: {e}")
            return False

def main():
    """Main function"""
    try:
        generator = TrainingAudioGenerator()
        
        print("üéµ Vietnamese Training Audio Generator")
        print("1. Generate all audio files")
        print("2. Check existing audio files")
        
        choice = input("Ch·ªçn option (1 ho·∫∑c 2): ").strip()
        
        if choice == "1":
            generator.generate_all_audio()
        elif choice == "2":
            audio_dir = generator.audio_output_dir
            if audio_dir.exists():
                audio_files = list(audio_dir.glob("*.wav"))
                print(f"üìÅ Found {len(audio_files)} audio files in {audio_dir}")
                for f in audio_files[:5]:  # Show first 5
                    print(f"  - {f.name}")
                if len(audio_files) > 5:
                    print(f"  ... and {len(audio_files) - 5} more")
            else:
                print("‚ùå No audio directory found")
        else:
            print("‚ùå Invalid choice")
            
    except Exception as e:
        logger.error(f"‚ùå Main execution failed: {e}")
        raise

if __name__ == "__main__":
    main()
